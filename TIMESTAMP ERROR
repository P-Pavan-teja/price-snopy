CREATE OR REPLACE FUNCTION CONVERT_TO_STANDARD_TIMESTAMP(input_value VARCHAR)
RETURNS VARCHAR
AS
$$
COALESCE(
  TO_CHAR(
    COALESCE(
      TRY_TO_TIMESTAMP(input_value, 'YYYY-MM-DD HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(input_value, 'YYYY/MM/DD HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(input_value, 'DD-MM-YYYY HH24:MI:SS:FF3'),
      TRY_TO_TIMESTAMP(input_value, 'MM-DD-YYYY HH24:MI:SS:FF3'),
      TRY_TO_TIMESTAMP(input_value, 'YYYY-MM-DD HH24:MI:SS:FF3'),
      TRY_TO_TIMESTAMP(REPLACE(input_value, '.', ':'), 'YYYY/MM/DD HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(SUBSTR(input_value, 1, 10) || ' ' || REPLACE(SUBSTR(input_value, 12), '.', ':'), 'YYYY-MM-DD HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(SUBSTR(input_value, 1, 4) || '-' || SUBSTR(input_value, 9, 2) || '-' || SUBSTR(input_value, 6, 2) || SUBSTR(input_value, 11), 'YYYY-MM-DD HH24:MI:SS:FF3')
    ), 
    'YYYY-MM-DD HH24:MI:SS.FF3'
  ),
  input_value  -- Return original value if conversion fails
)
$$;




CREATE OR REPLACE FUNCTION CONVERT_TO_STANDARD_TIMESTAMP(input_value VARCHAR)
RETURNS VARCHAR
AS
$$
COALESCE(
  TO_CHAR(
    COALESCE(
      TRY_TO_TIMESTAMP(input_value, 'YYYY-MM-DD HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(input_value, 'YYYY/MM/DD HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(input_value, 'DD-MM-YYYY HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(input_value, 'MM-DD-YYYY HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(input_value, 'YYYY-MM-DD HH24:MI:SS:FF9'),
      TRY_TO_TIMESTAMP(input_value, 'YYYY/MM/DD HH24.MI.SS.FF9'),
      TRY_TO_TIMESTAMP(input_value, 'YYYY-MM-DD-HH24.MI.SS.FF9'),
      TRY_TO_TIMESTAMP(input_value, 'YYYY-DD-MM HH24:MI:SS:FF9')
    ), 
    'YYYY-MM-DD HH24:MI:SS.FF3'
  ),
  input_value  -- Return original value if conversion fails
)
$$;

      -- TRY_TO_TIMESTAMP(SUBSTR(input_value, 1, 10) || ' ' || REPLACE(SUBSTR(input_value, 12), '.', ':'), 'YYYY-MM-DD HH24:MI:SS:FF9'),

      --       TRY_TO_TIMESTAMP(SUBSTR(input_value, 1, 4) || '-' || SUBSTR(input_value, 9, 2) || '-' || SUBSTR(input_value, 6, 2) || SUBSTR(input_value, 11), 'YYYY-MM-DD HH24:MI:SS:FF3')
      


-- Test Case 1: YYYY-MM-DD HH:MM:SS:FF9
SELECT 
  'Format 1' AS test_case,
  'YYYY-MM-DD HH:MM:SS:FF9' AS format_name,
  '2024-05-29 14:30:25:1' AS input_value,
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 14:30:25:1') AS output_result

UNION ALL

-- Test Case 2: YYYY/MM/DD HH:MM:SS:FF9
SELECT 
  'Format 2',
  'YYYY/MM/DD HH:MM:SS:FF9',
  '2024/05/29 14:30:25:123456789',
  CONVERT_TO_STANDARD_TIMESTAMP('2024/05/29 14:30:25:123456789')

UNION ALL

-- Test Case 3: YYYY/MM/DD HH.MM.SS.FF9
SELECT 
  'Format 3',
  'YYYY/MM/DD HH.MM.SS.FF9',
  '2024/05/29 14.30.25.123456789',
  CONVERT_TO_STANDARD_TIMESTAMP('2024/05/29 14.30.25.123456789')

UNION ALL

-- Test Case 4: YYYY-DD-MM HH24:MI:SS:MS (day > 12)
SELECT 
  'Format 4',
  'YYYY-DD-MM HH24:MI:SS:MS',
  '2024-29-05 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-29-05 14:30:25:123')

UNION ALL

-- Test Case 5: MM-DD-YYYY HH24:MI:SS:MS (month <= 12)
SELECT 
  'Format 5',
  'MM-DD-YYYY HH24:MI:SS:MS',
  '05-29-2024 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('05-29-2024 14:30:25:123')

UNION ALL

-- Test Case 6: DD-MM-YYYY HH24:MI:SS:MS (day > 12)
SELECT 
  'Format 6',
  'DD-MM-YYYY HH24:MI:SS:MS',
  '29-05-2024 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('29-05-2024 14:30:25:123')

UNION ALL

-- Test Case 7: YYYY-MM-DD HH24:MI:SS:MS (standard format)
SELECT 
  'Format 7',
  'YYYY-MM-DD HH24:MI:SS:MS',
  '2024-05-29 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 14:30:25:123')

UNION ALL

-- Test Case 8: YYYY-MM-DD-HH24.MI.SS.FF9
SELECT 
  'Format 8',
  'YYYY-MM-DD-HH24.MI.SS.FF9',
  '2024-05-29-14.30.25.123456789',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29-14.30.25.123456789')

ORDER BY test_case;

SELECT *, TRY_CAST($4 AS TIMESTAMP) FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

-- =====================================================
-- NEGATIVE TEST CASES - SHOULD RETURN NULL OR ERROR
-- =====================================================

-- ============ INVALID DATE VALUES ============
SELECT 'Invalid Date Tests:' AS test_section;

SELECT 
  'Invalid Month (13)' AS negative_test,
  '2024-13-29 14:30:25:123' AS input_value,
  CONVERT_TO_STANDARD_TIMESTAMP('2024-13-29 14:30:25:123') AS result

UNION ALL SELECT 
  'Invalid Day (32)',
  '2024-05-32 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-32 14:30:25:123')

UNION ALL SELECT 
  'February 30th',
  '2024-02-30 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-02-30 14:30:25:123')

UNION ALL SELECT 
  'April 31st',
  '2024-04-31 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-04-31 14:30:25:123')

UNION ALL SELECT 
  'Month 00',
  '2024-00-15 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-00-15 14:30:25:123')

UNION ALL SELECT 
  'Day 00',
  '2024-05-00 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-00 14:30:25:123')

UNION ALL SELECT 
  'Non-leap year Feb 29',
  '2023-02-29 14:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2023-02-29 14:30:25:123')

ORDER BY negative_test;

-- ============ INVALID TIME VALUES ============
SELECT 'Invalid Time Tests:' AS test_section;

SELECT 
  'Hour 25' AS negative_test,
  '2024-05-29 25:30:25:123' AS input_value,
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 25:30:25:123') AS result

UNION ALL SELECT 
  'Hour 99',
  '2024-05-29 99:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 99:30:25:123')

UNION ALL SELECT 
  'Minute 60',
  '2024-05-29 14:60:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 14:60:25:123')

UNION ALL SELECT 
  'Minute 99',
  '2024-05-29 14:99:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 14:99:25:123')

UNION ALL SELECT 
  'Second 60',
  '2024-05-29 14:30:60:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 14:30:60:123')

UNION ALL SELECT 
  'Second 99',
  '2024-05-29 14:30:99:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 14:30:99:123')

UNION ALL SELECT 
  'Negative Hour',
  '2024-05-29 -5:30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024-05-29 -5:30:25:123')

ORDER BY negative_test;

-- ============ WRONG FORMAT PATTERNS ============
SELECT 'Wrong Format Tests:' AS test_section;

SELECT 
  'Missing Separators' AS negative_test,
  '20240529143025123' AS input_value,
  CONVERT_TO_STANDARD_TIMESTAMP('20240529143025123') AS result

UNION ALL SELECT 
  'Wrong Separators',
  '2024.05.29 14-30-25-123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024.05.29 14-30-25-123')

UNION ALL SELECT 
  'Mixed Separators',
  '2024/05-29 14.30:25:123',
  CONVERT_TO_STANDARD_TIMESTAMP('2024/05-29 14.30:25:123')

UNION ALL SELECT 
  'Too Many Digits Year',
  '20240-05-29 14:30:25:123',
  CONVERT_TO_ST


